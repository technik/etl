//-------------------------------------------------------------
// std::chrono
//-------------------------------------------------------------
#pragma once

#include <Arduino.h> // For micros()
#include <ratio>

namespace std::chrono
{
	template<
		class Rep,
		class Period = std::ratio<1>
	> class duration
	{
	public:
		using rep = Rep;
		using period = typename Period::type;

		constexpr duration() = default;
		duration(const duration&) = default;

		template<class Rep2>
		constexpr explicit duration(const Rep2& r)
			: m_count(r)
		{
		}

		template<class Rep2, class Period2, class relative_ratio = std::ratio_divide<Period2,Period>>
		constexpr duration(const duration<Rep2,Period2>& d)
			: m_count(d.count() * relative_ratio::num / relative_ratio::den)
		{
		}

		duration& operator=(const duration& other) = default;

		constexpr rep count() const { return m_count; }

		static constexpr duration zero() noexcept { duration d; d.m_count = 0; return d; }

		constexpr duration operator-() const {
			duration d;
			d.m_count = -m_count;
			return d;
		}

	private:
		rep m_count;
	};

	template<
		class ToDuration,
		class Rep,
		class Period
	> constexpr ToDuration duration_cast(const duration<Rep,Period>& d)
	{
		return ToDuration(d);
	}

	using microseconds = duration<unsigned,std::micro>;
	using milliseconds = duration<unsigned long,std::milli>;
	using seconds = duration<unsigned>;
	using minutes = duration<unsigned, std::ratio<60>>;
	using hours = duration<unsigned, std::ratio<3600>>;

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wliteral-suffix" // Yes, GCC, I know suffixes without _ are reserved for std.
	constexpr seconds operator""s (unsigned long  long s) {
		return seconds(s);
	}

	constexpr milliseconds operator""ms (unsigned long long ms) {
		return milliseconds(ms);
	}

	constexpr microseconds operator""us (unsigned long long us) {
		return microseconds(us);
	}
#pragma GCC diagnostic pop

	template<
		class Clock,
		class Duration = typename Clock::duration
	> class time_point
	{
	public:
		using clock = Clock;
		using duration = Duration;
		using rep = typename Duration::rep;
		using period = typename Duration::period;

		time_point() = default;
		explicit time_point(const duration& d)
			: m_time (d)
		{
		}

		constexpr duration time_since_epoch() const
		{
			return m_time;
		}

	private:
		duration m_time;
	};

	struct steady_clock
	{
		using rep = decltype(::micros());
		using period = microseconds::period;
		using duration = std::chrono::duration<rep, period>;
		using time_point = std::chrono::time_point<steady_clock>;

		static constexpr bool is_steady = true;

		static time_point now() noexcept
		{
			return time_point(duration(micros()));
		}
	};

}	// std::chrono