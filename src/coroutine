//-------------------------------------------------------------
// std::chrono
//-------------------------------------------------------------
// Copyright 2021 Carmelo J Fdez-Aguera
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without restriction,
// including without limitation the rights to use, copy, modify, merge, publish, distribute,
// sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
// NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#pragma once

namespace std
{
	template<class R, class... ArgTypes>
	struct coroutine_traits
	{
		using promise_type = typename R::promise_type;
	};

	template< class = void >
	struct coroutine_handle;

	template<>
	struct coroutine_handle<void>
	{

	};
	template<class Promise>
	struct coroutine_handle : coroutine_handle<>
	{
		using coroutine_handle<>::coroutine_handle;
	};

	struct suspend_always
	{
		constexpr bool await_ready() const noexcept { return false; }
		void await_suspend(coroutine_handle<>) const noexcept {}
		void await_resume() const noexcept {}
	};

	struct suspend_never
	{
		constexpr bool await_ready() const noexcept { return true; }
		void await_suspend(coroutine_handle<>) const noexcept {}
		void await_resume() const noexcept {}
	};
}