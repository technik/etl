//-------------------------------------------------------------
// std::chrono
//-------------------------------------------------------------
pragma once

#include <ratio>

namespace std::chrono
{
	template<
		class Rep,
		class Period = std::ratio<1>
	> class duration
	{
	public:
		using rep = Rep;
		using period = Period::type;

		constexpr duration() = default;
		duration(const duration&) = default;

		template<class Rep2>
		constexpr explicit duration(const Rep2& r)
		{
			m_count = r;
		}

		template<class Rep2, class Period2>
		constexpr duration(const duration<Rep2,Period2>& d)
		{
			using relative_ratio = std::ratio_divide<Period2,Period>;
			m_count = d.count() * relative_ratio::num / relative_ratio::den;
		}

		duration& operator=(const duration& other) = default;

		constexpr rep count() const { return m_count; }

		static constexpr duration zero() noexcept { duration d; d.m_count = 0; return d; }

		constexpr duration operator-() const {
			duration d;
			d.m_count = -m_count;
			return d;
		}

	private:
		rep m_count;
	};

	template<
		class ToDuration,
		class Rep,
		class Period
	> constexpr ToDuration duration_cast(const duration<Rep,Period>& d)
	{
		return ToDuration(d);
	}

	using microsecods = duration<unsigned,std::micro>;
	using milliseconds = duration<unsigned long,std::milli>;
	using seconds = duration<unsigned>
	using minutes = duration<unsigned, std::ratio<60>>;
	using hours = duration<unsigned, std::ratio<3600>>;

	constexpr seconds operator""s (unsigned s) {
		return seconds(s);
	}

	constexpr milliseconds operator""ms (unsigned long ms) {
		return milliseconds(ms);
	}

	constexpr microseconds operator""us (unsigned us) {
		return microseconds(us);
	}

}	// std::chrono